{"source_files":[{"name":"app/js/app.js","source":"'use strict';\nangular.module('pdxStreetcarApp', [\n    'ngCookies',\n    'ngResource',\n    'ngSanitize',\n    'ngRoute',\n    'ui.bootstrap',\n    'ui.utils',\n    'ngAnimate',\n    'geolocation',\n    'ui.select2',\n    'ui.router'\n])\n    .config(function ($stateProvider, $urlRouterProvider) {\n        $stateProvider\n            .state('root', {\n                url: '',\n                templateUrl: 'views/routeMap/routeMap.html',\n                controller: 'RouteMapCtrl as routeMap'\n            })\n            .state('home', {\n                url: '/',\n                templateUrl: 'views/routeMap/routeMap.html',\n                controller: 'RouteMapCtrl as routeMap'\n            })\n            .state('about', {\n                url: '/about',\n                templateUrl: 'views/about/about.html',\n                controller: 'AboutCtrl as about'\n            });\n    })\n\n    .config(['$httpProvider', function ($httpProvider, $state) {\n        delete $httpProvider.defaults.headers.common['X-Requested-With']; //Fixes cross domain requests\n    }]);\n","coverage":[null,1,null,null,null,null,null,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,3,null,null]},{"name":"app/js/controllers.js","source":"/**\n * Created by jamesonnyeholt2 on 9/4/14.\n */\n\n'use strict';\nangular.module('pdxStreetcarApp')\n  .controller('topNavigationCtrl', function ($scope, $routeParams, $log, $route, $location, geolocation, $state) {\n    var self = this;\n\n    function geoLocate() {\n      $log.log(\"Using Geolocation to find nearby stops.\");\n      geolocation.getLocation()\n        .then(function (data) {\n          $scope.distanceFeet = 1320;\n          $scope.coords = {\n            lat: data.coords.latitude,\n            long: data.coords.longitude\n          };\n          $location.path('/nearbyStops/' + $scope.coords.lat + '/' + $scope.coords.long + '/' + $scope.distanceFeet);\n        });\n    }\n\n    self.geoLocate = function () {\n      geoLocate();\n    };\n    self.topNavigationItems = [\n      {\n        displayName: \"Home\",\n        route: \"/\",\n        routeSecondary: \"\"\n      },\n      {\n        displayName: \"About\",\n        route: \"/about\"\n      }\n    ];\n    self.isActive = function (navItem) {\n      if (navItem.route === $state.current.url || navItem.routeSecondary === $state.current.url) {\n        return true;\n      }\n    };\n  })\n  .controller('AboutCtrl', function () {\n    var self = this;\n  })\n  .controller('MainCtrl', function ($scope, $log, $location, geolocation, timeCalcService) {\n\n    // Variables\n    $scope.showStreetcarServiceWarning = false;\n    $scope.streetcarScheduleMessage = \"\";\n    function determineIfServiceIsAvailable() {\n      timeCalcService.isStreetCarOutOfService()\n        .then(function (differenceToStartTime, differenceToEndTime) {\n          $log.info(\"Streetcar is currently available.  Time is within schedule.\");\n          $scope.streetcarScheduleMessage = \"The Streetcar is currently in service.\";\n          $scope.showStreetcarServiceWarning = false;\n        }, function (differenceToStartTime, differenceToEndTime) {\n          $log.warn(\"Streetcar not currently available.  Time is outside of schedule.\");\n          $scope.streetcarScheduleMessage = \"The Streetcar is currently out of service.\";\n          $scope.showStreetcarServiceWarning = true;\n        });\n    }\n\n    determineIfServiceIsAvailable();\n  })\n  .controller('RouteMapCtrl', function ($scope, $rootScope, $log, $q, $http, trimet, RouteColors, $timeout, feetToMeters, timeCalcService, formatRetrievedRoutes, trimetUtilities, routeMapInstance, RouteData, userLocation, mapLayers, Navigator, NearbyTransit, StopData) {\n    'use strict';\n    var self = this,\n      map;\n    self.stopIsSelected = false;\n    self.distanceFromLocation = 660;\n    self.nothingIsSelected = true;\n    function getNearbyStops() {\n      return NearbyTransit.get(self.userLatitude, self.userLongitude, self.distanceFromLocation)\n        .then(function (exports) {\n          self.nearbyRoutes = exports.nearbyRoutes;\n          self.nearbyStops = exports.nearbyStops;\n          return exports;\n        });\n    }\n\n    function getStreetCarData() {\n      return RouteData.streetCar()\n        .then(function (data) {\n          self.streetcar = data;\n          return data;\n        })\n        .then(function (data) {\n          var exports = RouteData.reconcileAlreadyEnabledRoutes('streetcar', data);\n          self.streetcar = exports;\n        });\n    }\n\n    function getTrimetData() {\n      return RouteData.trimet()\n        .then(function (data) {\n          self.maxRail = data;\n          return data;\n        })\n        .then(function (data) {\n          var exports = RouteData.reconcileAlreadyEnabledRoutes('trimet', data);\n          self.maxRail = exports;\n        });\n    }\n\n    function getBusData() {\n      return RouteData.bus()\n        .then(function (data) {\n          self.busRoutes = data;\n          return data;\n        })\n        .then(function (data) {\n          var exports = RouteData.reconcileAlreadyEnabledRoutes('bus', data);\n          self.busRoutes = exports;\n        });\n    }\n\n    function toggleNearbyRoutes(route) {\n      var exports = NearbyTransit.toggleNearbyRoute(route);\n      self.nearbyRoutes = exports.nearbyRoutes;\n    }\n\n    self.isStreetCarRoute = trimetUtilities.isStreetCarRoute;\n    self.isTrimetRoute = trimetUtilities.isTrimetRoute;\n    self.toggleServiceBoundaryOverlay = mapLayers.toggleServiceBoundaryLayer;\n    self.toggleTransitCenterOverlay = mapLayers.toggleTransitCenterLayer;\n    self.toggleParkAndRidesOverlay = mapLayers.toggleParkAndRidesLayer;\n    self.toggleStreetCarRoute = function toggleStreetCarRoute(route) {\n      self.streetcar = Navigator.toggleRoute('streetcar', route);\n    };\n    self.toggleTrimetRoute = function toggleTrimetRoute(route) {\n      self.maxRail = Navigator.toggleRoute('trimet', route);\n    };\n    self.toggleBusRoute = function toggleBusRoute(route) {\n      self.busRoutes = Navigator.toggleRoute('bus', route);\n    };\n    self.toggleNearbyRoute = toggleNearbyRoutes;\n    self.selectStop = function selectStop (stop, origin) {\n\n      var stopMarker = StopData.createStopMarker(stop);\n      StopData.memoizeIndividualStopMarker(stopMarker, stop);\n      StopData.selectStopMarker(stop);\n\n      if (origin === 'routeDetails') {\n        self.selectedRoute = RouteData.selectRouteStop(stop);\n      } else if (origin === 'nearbyStops') {\n        self.nearbyStops = NearbyTransit.toggleStopSelected(stop);\n      } else {\n        $log.log('Do something');\n      }\n\n    };\n    self.selectRoute = function selectRoute(route) {\n      RouteData.selectRoute(route);\n      RouteData.getRouteData(parseInt(route.route))\n        .then(function (data) {\n          self.selectedRoute = data;\n        });\n    };\n    self.getNearbyRoutes = getNearbyStops;\n    self.getStreetCarData = getStreetCarData;\n    self.getTrimetData = getTrimetData;\n    self.getBusData = getBusData;\n    // Init\n    function init() {\n      function getUserLocation() {\n        var deferred = $q.defer(),\n          userLocationMarker,\n          userLatLng;\n\n        function handleNoGeolocation(errorFlag) {\n          var content;\n          if (errorFlag) {\n            content = 'Error: The Geolocation service failed.';\n          } else {\n            content = 'Error: Your browser doesn\\'t support geolocation.';\n          }\n        }\n\n        function checkForGeolocation() {\n          if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(function (position) {\n              self.userLatitude = position.coords.latitude;\n              self.userLongitude = position.coords.longitude;\n              userLatLng = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);\n              userLocationMarker = new google.maps.Marker({\n                map: routeMapInstance.map,\n                position: userLatLng,\n                animation: google.maps.Animation.DROP,\n                clickable: true,\n                title: \"Current Location\"\n              });\n              userLocation.set(userLocationMarker);\n              google.maps.event.addListener(userLocationMarker, 'click', function () {\n                map.panTo(userLatLng);\n              });\n              var exports = {\n                latitude: self.userLatitude,\n                longitude: self.userLongitude\n              };\n              deferred.resolve(exports);\n            }, function () {\n              handleNoGeolocation(true);\n              deferred.reject();\n            });\n          } else {\n            // Browser doesn't support Geolocation\n            handleNoGeolocation(false);\n            deferred.reject();\n          }\n        }\n\n        checkForGeolocation();\n        return deferred.promise;\n      }\n\n      $timeout(function () {\n        routeMapInstance.init()\n          .then(getUserLocation)\n          .then(function setUserLocationVariables(exports) {\n            self.latitude = exports.latitude;\n            self.longitude = exports.longitude;\n            return exports;\n          })\n          .then(getNearbyStops)\n          .then(mapLayers.load);\n      }, 100);\n    }\n\n    init();\n    function arrivalInformation(e, arrivalInfo) {\n      self.selectedStop = arrivalInfo;\n      self.remainingTime = arrivalInfo.resultSet.arrival[0].remainingTime;\n      self.arrivalInfo = arrivalInfo.resultSet.arrival[0];\n      self.stopIsSelected = true;\n    }\n\n    function routeHoveredFromMap(e, data) {\n      self.hoveredRoute = data;\n      $scope.$apply();\n    }\n\n    function routeSelectedFromMap(e, routeId) {\n      self.nothingIsSelected = false;\n      RouteData.getRouteData(parseInt(routeId))\n        .then(function (data) {\n          self.selectedRoute = data;\n          $scope.$apply();\n        });\n    }\n\n    $rootScope.$on('arrivalInformation', arrivalInformation);\n    $rootScope.$on('routeHoveredFromMap', routeHoveredFromMap);\n    $rootScope.$on('routeSelectedFromMap', routeSelectedFromMap);\n\n\n    self.closeDetailsPanel = function closeDetailsPanel() {\n      self.selectedRoute = null;\n      self.nothingIsSelected = true;\n    };\n  });\n","coverage":[null,null,null,null,null,1,null,0,null,1,0,0,null,0,0,null,null,null,0,null,null,null,0,0,null,0,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,0,null,null,null,null,0,0,1,0,null,0,0,0,null,0,0,0,null,null,null,0,null,null,null,0,null,0,0,0,1,0,null,0,0,0,null,null,null,1,0,null,0,0,null,null,0,0,null,null,null,1,0,null,0,0,null,null,0,0,null,null,null,1,0,null,0,0,null,null,0,0,null,null,null,1,0,0,null,null,0,0,0,0,0,0,0,null,0,0,null,0,0,null,0,0,null,0,0,0,null,0,0,0,0,null,0,null,null,null,0,0,0,null,0,null,null,0,0,0,0,null,1,1,0,null,null,null,1,0,0,0,null,0,null,null,null,1,0,0,0,0,0,0,null,null,null,null,null,null,0,0,0,null,0,null,null,null,0,null,0,0,null,null,null,0,0,null,null,null,0,0,null,null,0,0,null,null,0,0,0,null,null,null,null,null,null,0,1,0,0,0,0,null,null,1,0,0,null,null,1,0,0,null,0,0,null,null,null,0,0,0,null,null,0,0,0,null,null,null]},{"name":"app/js/directives.js","source":"/**\n * Created by jamesonnyeholt2 on 9/4/14.\n */\n\n'use strict';\n\nangular.module('pdxStreetcarApp')\n\n    .directive('psFullHeightLeftCol', ['$parse', '$timeout',\n        function () {\n            return function (scope, element) {\n                var resize;\n                resize = function () {\n                    var calculatedHeight,\n                        windowHeight,\n                        navHeader = 52,\n                        search = 60,\n                        tabs = 80;\n                    windowHeight = $(window).height();\n                    calculatedHeight = windowHeight - navHeader - search - tabs;\n                    return element.css({\n                        'min-height': calculatedHeight,\n                        'max-height': calculatedHeight,\n                        'height': calculatedHeight\n                    });\n                };\n                resize();\n                $(window).bind('DOMMouseScroll', function () {\n                    return resize();\n                });\n                return $(window).resize(function () {\n                    return resize();\n                });\n            };\n        }\n    ])\n\n    .directive('psFullHeightRightCol', ['$parse', '$timeout',\n        function () {\n            return function (scope, element) {\n                var resize;\n                resize = function () {\n                    var calculatedHeight,\n                        windowHeight,\n                        navHeader = 52,\n                        offset = 20;\n                    windowHeight = $(window).height();\n                    calculatedHeight = windowHeight - navHeader - offset;\n                    return element.css({\n                        'min-height': calculatedHeight,\n                        'max-height': calculatedHeight,\n                        'height': calculatedHeight\n                    });\n                };\n                resize();\n                $(window).bind('DOMMouseScroll', function () {\n                    return resize();\n                });\n                return $(window).resize(function () {\n                    return resize();\n                });\n            };\n        }\n    ]);\n","coverage":[null,null,null,null,null,null,1,null,null,null,0,0,0,0,null,null,null,null,0,0,0,null,null,null,null,null,0,0,0,null,0,0,null,null,null,null,null,null,null,0,0,0,0,null,null,null,0,0,0,null,null,null,null,null,0,0,0,null,0,0,null,null,null,null,null]},{"name":"app/js/enum.js","source":"/**\n * Created by jamesonnyeholt2 on 9/4/14.\n */\n\n\nangular.module('pdxStreetcarApp')\n\n    .constant('RouteColors', {\n        \"193\": \"89C831\",\n        \"194\": \"00A9CE\",\n        \"100\": \"0062A9\",\n        \"200\": \"008850\",\n        \"90\": \"D30E41\",\n        \"190\": \"FFC500\",\n        \"BUS\": \"008DCB\",\n        \"default\": \"ADD8E6\"\n    })\n\n    .constant('distanceConversions', {\n        FEET_TO_METERS: 0.3048\n    });\n","coverage":[null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"app/js/resources.js","source":"/**\n * Created by jamesonnyeholt2 on 9/8/14.\n */\n\nangular.module('pdxStreetcarApp')\n\n    .factory('trimet', function ($http, $q) {\n        'use strict';\n        // Service logic\n        var trimetAppId = \"F3757A12A14F88550C14A9A2B\";\n        var baseUrl = 'http://developer.trimet.org/ws/V1/';\n        var trimetURL;\n\n        function getArrivalsForStreetCar(locid) {\n            var deferred = $q.defer();\n            trimetURL = baseUrl + 'arrivals/json/true/locIDs/' + locid + '/appID/' + trimetAppId;\n            $http({\n                method: 'GET',\n                url: trimetURL,\n                responseType: 'xml',\n                headers: {\n                    'Accept': 'application/xml, text/xml, */*; q=0.01'\n                }\n            }).\n                success(function (data, status, headers, config) {\n                    deferred.resolve(data);\n                }).\n                error(function (data, status, headers, config) {\n                    deferred.reject(data);\n                });\n            return deferred.promise;\n        }\n\n        function getTrimetRoutes() {\n            var deferred = $q.defer();\n            trimetURL = baseUrl + 'routeConfig/json/true/routes/100,200,90,190/stops/tp/dir/appID/' + trimetAppId;\n            $http({\n                method: 'GET',\n                url: trimetURL,\n                responseType: 'xml',\n                headers: {\n                    'Accept': 'application/xml, text/xml, */*; q=0.01'\n                }\n            }).\n                success(function (data, status, headers, config) {\n                    deferred.resolve(data);\n                }).\n                error(function (data, status, headers, config) {\n                    deferred.reject(data);\n                });\n            return deferred.promise;\n        }\n\n        function getAllBusRoutes() {\n            var deferred = $q.defer();\n            var routeNumbers = [\n                1, 4, 6, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 87, 88, 92, 93, 94, 96, 99, 152, 154, 155, 156\n            ];\n            trimetURL = baseUrl + 'routeConfig/json/true/routes/' + routeNumbers + '/stops/tp/dir/true/appID/' + trimetAppId;\n            $http({\n                method: 'GET',\n                url: trimetURL,\n                responseType: 'xml',\n                headers: {\n                    'Accept': 'application/xml, text/xml, */*; q=0.01'\n                }\n            }).\n                success(function (data, status, headers, config) {\n                    deferred.resolve(data);\n                }).\n                error(function (data, status, headers, config) {\n                    deferred.reject(data);\n                });\n            return deferred.promise;\n        }\n\n        function getStreetcarRoutes() {\n            var deferred = $q.defer();\n            trimetURL = baseUrl + 'routeConfig/json/true/routes/193,194/stops/tp/dir/appID/' + trimetAppId;\n            $http({\n                method: 'GET',\n                url: trimetURL,\n                responseType: 'xml',\n                headers: {\n                    'Accept': 'application/xml, text/xml, */*; q=0.01'\n                }\n            }).\n                success(function (data, status, headers, config) {\n                    deferred.resolve(data);\n                }).\n                error(function (data, status, headers, config) {\n                    deferred.reject(data);\n                });\n            return deferred.promise;\n        }\n\n        function getStopsAroundLocation(lat, lng, radiusFeet) {\n            var deferred = $q.defer();\n            var latLng = lat + ',' + lng;\n            trimetURL = baseUrl + 'stops/json/true/showRoutes/true/showRouteDirs/true/ll/' + latLng + '/feet/' + radiusFeet + '/appID/' + trimetAppId;\n            $http({\n                method: 'GET',\n                url: trimetURL,\n                responseType: 'xml',\n                headers: {\n                    'Accept': 'application/xml, text/xml, */*; q=0.01'\n                }\n            }).\n                success(function (data, status, headers, config) {\n                    deferred.resolve(data);\n                }).\n                error(function (data, status, headers, config) {\n                    deferred.reject(data);\n                });\n            return deferred.promise;\n        }\n\n        function getStops(routeId) {\n            var deferred = $q.defer();\n            trimetURL = baseUrl + 'routeConfig/json/true/routes/' + routeId + '/stops/tp/dir/appID/' + trimetAppId;\n            $http({\n                method: 'GET',\n                url: trimetURL,\n                responseType: 'xml',\n                headers: {\n                    'Accept': 'application/xml, text/xml, */*; q=0.01'\n                }\n            }).\n                success(function (data, status, headers, config) {\n                    deferred.resolve(data);\n                }).\n                error(function (data, status, headers, config) {\n                    deferred.reject(data);\n                });\n            return deferred.promise;\n        }\n\n        function getRouteById(routeId) {\n            var deferred = $q.defer();\n            trimetURL = baseUrl + 'routeConfig/json/true/routes/' + routeId + '/stops/tp/dir/appID/' + trimetAppId;\n            $http({\n                method: 'GET',\n                url: trimetURL,\n                responseType: 'xml',\n                headers: {\n                    'Accept': 'application/xml, text/xml, */*; q=0.01'\n                }\n            }).\n                success(function (data, status, headers, config) {\n                    deferred.resolve(data);\n                }).\n                error(function (data, status, headers, config) {\n                    deferred.reject(data);\n                });\n            return deferred.promise;\n        }\n\n        // Public API here\n        return {\n            getStopsAroundLocation: getStopsAroundLocation,\n            getArrivalsForStop: getArrivalsForStreetCar,\n            getRouteById: getRouteById,\n            rail: {\n                getRoutes: getTrimetRoutes\n            },\n            streetcar: {\n                getRoutes: getStreetcarRoutes\n            },\n            bus: {\n                getRoutes: getAllBusRoutes\n            },\n            getStops: getStops\n        };\n    });\n","coverage":[null,null,null,null,1,null,null,null,null,0,0,0,null,1,0,0,0,null,null,null,null,null,null,null,null,0,null,null,0,null,0,null,null,1,0,0,0,null,null,null,null,null,null,null,null,0,null,null,0,null,0,null,null,1,0,0,null,null,0,0,null,null,null,null,null,null,null,null,0,null,null,0,null,0,null,null,1,0,0,0,null,null,null,null,null,null,null,null,0,null,null,0,null,0,null,null,1,0,0,0,0,null,null,null,null,null,null,null,null,0,null,null,0,null,0,null,null,1,0,0,0,null,null,null,null,null,null,null,null,0,null,null,0,null,0,null,null,1,0,0,0,null,null,null,null,null,null,null,null,0,null,null,0,null,0,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"app/js/services.js","source":"/**\n * Created by jamesonnyeholt2 on 9/4/14.\n */\n\nangular.module('pdxStreetcarApp')\n\n    .factory('feetToMeters', function (distanceConversions) {\n    \"use strict\";\n    return function (feet) {\n        return feet * distanceConversions.FEET_TO_METERS;\n    };\n})\n\n    .factory('timeCalcService', function ($q, $log) {\n        // Variables\n        var streetCarOperatingHours;\n\n        // Utility Functions\n        function getNewDate(hour, minute) {\n            var constructedDate;\n            constructedDate = moment();\n            constructedDate.hours(hour);\n            constructedDate.minutes(minute);\n            return constructedDate;\n        }\n\n        streetCarOperatingHours = [\n            {\n                name: 'sunday',\n                daysOfWeek: [0],\n                startTime: getNewDate(7, 30),\n                endTime: getNewDate(23, 30)\n            },\n            {\n                name: 'weekdays',\n                daysOfWeek: [1, 2, 3, 4, 5],\n                startTime: getNewDate(5, 30),\n                endTime: getNewDate(23, 30)\n            },\n            {\n                name: 'saturday',\n                daysOfWeek: [6],\n                startTime: getNewDate(7, 30),\n                endTime: getNewDate(23, 30)\n            }\n\n        ];\n\n        // Service logic\n        function getTimeDifference(earlierDate, laterDate) {\n            var deferred = $q.defer(),\n                nTotalDiff = laterDate.getTime() - earlierDate.getTime(),\n                oDiff = new Object();\n            oDiff.days = Math.floor(nTotalDiff / 1000 / 60 / 60 / 24);\n            nTotalDiff -= oDiff.days * 1000 * 60 * 60 * 24;\n            oDiff.hours = Math.floor(nTotalDiff / 1000 / 60 / 60);\n            nTotalDiff -= oDiff.hours * 1000 * 60 * 60;\n            oDiff.minutes = Math.floor(nTotalDiff / 1000 / 60);\n            nTotalDiff -= oDiff.minutes * 1000 * 60;\n            oDiff.seconds = Math.floor(nTotalDiff / 1000);\n            if (oDiff) {\n                deferred.resolve(oDiff);\n            } else {\n                deferred.reject();\n            }\n            return deferred.promise;\n        }\n\n        function calculateDifferenceInTimes(arrival, queryTime) {\n            var estimatedArrivalTime,\n                deferred = $q.defer(),\n                queryTimeDateObject;\n            if (arrival.estimated) {\n                estimatedArrivalTime = new Date(arrival.estimated);\n            } else {\n                estimatedArrivalTime = new Date(arrival.scheduled);\n            }\n            queryTimeDateObject = new Date(queryTime);\n            getTimeDifference(queryTimeDateObject, estimatedArrivalTime)\n                .then(function (diff) {\n                    deferred.resolve(diff);\n                }, function () {\n                    deferred.reject();\n                });\n            return deferred.promise;\n        }\n\n        function sortArrivalsArrayByDate(arrivals) {\n            arrivals.sort(function (a, b) {\n                var keyA = new Date(a.estimated),\n                    keyB = new Date(b.estimated);\n                if (keyA < keyB) {\n                    return -1;\n                }\n                if (keyA > keyB) {\n                    return 1;\n                }\n                return 0;\n            });\n            return arrivals;\n        }\n\n        function calculateRelativeTimes(arrivalInfo, queryTime) {\n            var deferred = $q.defer(),\n                arrivals = arrivalInfo.resultSet.arrival;\n            arrivals = sortArrivalsArrayByDate(arrivals);\n            _.forEach(arrivals, function (currentArrival, index, array) {\n                calculateDifferenceInTimes(currentArrival, queryTime)\n                    .then(function (remainingTime) {\n                        if (remainingTime.days < 1 && remainingTime.hours < 1) {\n                            if (remainingTime.minutes <= 3) {\n                                currentArrival.imminent = true;\n                            } else if (remainingTime.minutes <= 6) {\n                                currentArrival.soon = true;\n                            } else if (remainingTime.minutes <= 15) {\n                                currentArrival.enoughTimeForCoffee = true;\n                            } else if (remainingTime.minutes >= 16) {\n                                currentArrival.aGoodAmountofTime = true;\n                            }\n                        } else {\n                            currentArrival.justWalk = true;\n                        }\n                        currentArrival.remainingTime = remainingTime;\n                        if ((index + 1) === array.length) {\n                            deferred.resolve(arrivalInfo);\n                        }\n                    }, function () {\n                        $log.error(\"Could not calculate the difference in times.\");\n                        deferred.reject();\n                    });\n            });\n            return deferred.promise;\n        }\n\n        function isStreetCarOutOfService() {\n            var deferred = $q.defer(),\n                currentDate,\n                currentDay,\n                operatingSchedule;\n            currentDate = moment();\n            currentDay = currentDate.day();\n\n            function findScheduleForTodaysDate() {\n                _.forEach(streetCarOperatingHours, function (schedule, index, array) {\n                    return _.find(schedule.daysOfWeek, function (dayNumber) {\n                        if (dayNumber === currentDay) {\n                            operatingSchedule = schedule;\n                            return operatingSchedule;\n                        }\n                    });\n                });\n            }\n\n            function currentTimeAfterStartTime(differenceInTime) {\n                if (differenceInTime > 0) {\n                    return true;\n                }\n            }\n\n            function currentTimeBeforeEndTime(differenceInTime) {\n                if (differenceInTime < 0) {\n                    return true;\n                }\n            }\n\n            function determineIfCurrentTimeIsInRange() {\n                var differenceToStartTime,\n                    differenceToEndTime;\n                differenceToStartTime = currentDate.diff(operatingSchedule.startTime, 'minutes');\n                differenceToEndTime = currentDate.diff(operatingSchedule.endTime, 'minutes');\n                if (currentTimeAfterStartTime(differenceToStartTime)) {\n                    if (currentTimeBeforeEndTime(differenceToEndTime)) {\n                        deferred.resolve(differenceToStartTime, differenceToEndTime);\n                    }\n                } else {\n                    if (currentTimeBeforeEndTime(differenceToEndTime)) {\n                        deferred.reject(differenceToStartTime, differenceToEndTime);\n                    }\n                }\n            }\n\n            findScheduleForTodaysDate();\n            determineIfCurrentTimeIsInRange();\n            return deferred.promise;\n        }\n\n\n        // Public API here\n        return {\n            calculateRelativeTimes: function (arrivalInfo, queryTime) {\n                return calculateRelativeTimes(arrivalInfo, queryTime);\n            },\n            calculateDifferenceInTimes: function (arrival, queryTime) {\n                return calculateDifferenceInTimes(arrival, queryTime);\n            },\n            isStreetCarOutOfService: function () {\n                return isStreetCarOutOfService();\n            }\n        };\n    })\n\n    .factory('formatRetrievedRoutes', function () {\n        \"use strict\";\n        return function (data) {\n            var result = {};\n            _.forEach(data.resultSet.route, function (route) {\n                var routeId = route.route;\n                var template = {\n                    name: route.desc,\n                    detour: route.detour,\n                    routeId: routeId,\n                    type: route.type,\n                    directions: []\n                };\n                if (route.dir && _.isArray(route.dir)) {\n                    if (route.dir[0]) {\n                        template.directions[0] = {\n                            routeId: routeId,\n                            directionId: route.dir[0].dir || 0,\n                            stops: route.dir[0].stop || [],\n                            displayName: route.dir[0].desc || route.desc,\n                            enabled: false\n                        };\n                    }\n                    if (route.dir[1]) {\n                        template.directions[1] = {\n                            routeId: routeId,\n                            directionId: route.dir[1].dir || 1,\n                            stops: route.dir[1].stop || [],\n                            displayName: route.dir[1].desc || route.desc,\n                            enabled: false\n                        };\n                    }\n                }\n                result[routeId] = template;\n            });\n            return result;\n        };\n    })\n\n    .factory('trimetUtilities', function () {\n\n        function isStreetCarRoute (arrival) {\n            return _.contains([193, 194], arrival.route);\n        }\n\n        function isTrimetRoute (arrival) {\n            return _.contains([100,200,90,190], arrival.route);\n        }\n\n        return {\n            isStreetCarRoute: isStreetCarRoute,\n            isTrimetRoute: isTrimetRoute\n        };\n    });\n","coverage":[null,null,null,null,1,null,null,null,0,0,null,null,null,null,null,0,null,null,1,0,0,0,0,0,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,0,null,null,0,0,0,0,0,0,0,0,0,null,0,null,0,null,null,1,0,null,null,0,0,null,0,null,0,0,null,0,null,0,null,0,null,null,1,0,0,null,0,0,null,0,0,null,0,null,0,null,null,1,0,null,0,0,0,null,0,0,0,0,0,0,0,0,0,null,null,0,null,0,0,0,null,null,0,0,null,null,0,null,null,1,0,null,null,null,0,0,null,1,0,0,0,0,0,null,null,null,null,null,1,0,0,null,null,null,1,0,0,null,null,null,1,0,null,0,0,0,0,0,null,null,0,0,null,null,null,null,0,0,0,null,null,null,null,0,null,0,null,null,0,null,null,0,null,null,null,null,null,null,0,0,0,0,0,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,1,3,null,null,1,0,null,null,3,null,null,null,null,null]}],"git":{"head":{"id":"57d4f698f4c05b6a9ea9fa285944be254fe89783","author_name":"Jameson Nyeholt","author_email":"jameson.nyeholt@gmail.com","committer_name":"Jameson Nyeholt","committer_email":"jameson.nyeholt@gmail.com","message":"Merge branch 'master' of https://github.com/wintermuted/Portland-Streetcar-App"},"branch":"master","remotes":[{"name":"origin","url":"https://wintermuted@github.com/wintermuted/Portland-Streetcar-App.git"}]},"run_at":"2014-09-21T07:46:58.103Z","service_name":"travis-ci","repo_token":"ip7FNmIBnVVLPx6lclEhHRtl3oOAy05Kz"}